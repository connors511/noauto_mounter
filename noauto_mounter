#!/bin/bash

# bash shortcut for `basename $0`
sProg=${0##*/}

usage() {
    cat <<EOF
Usage: 

$sProg [-n] [-l|--local] [-r|--remote] [-h|--help|--usage]

Options:
	-n|               Dry run - shows what would happen, but does nothing
	-l|--local        Only mount local disks and bind mounts
	-r|--remote       Only mount NFS mounts
	-h|--help|--usage Displays this help
EOF
	exit 0
}

die () {
	sMsg=${1:-}
	# don't loop on ERR
	trap '' ERR

	sErr="$sProg failed from $HOSTNAME to $sTargetHost"
	echo -e "\n$sErr\n$sMsg\n" >&2
	echo $sMsg > /tmp/${sProg}.err.msg

#	if [[ -n "$sEmailAddress" ]]; then
#		/usr/bin/mail -s "$sErr" "$sEmailAddress" < /tmp/${sProg}.err.msg
#	fi

	# This is a fancy shell core dumper
	if echo $sMsg | grep -q 'Error line .* with status'; then
		line=`echo $sMsg | sed 's/.*Error line \(.*\) with status.*/\1/'`
		echo " DIE: Code dump:" >&2
		nl -ba $0 | grep -3 "\b$line\b" >&2
	fi

	exit 1
}

f_mount () {

	mountpoint -q "$1"
	if [ $? -eq 0 ]; then
		if [ "$bDry" = true ] ; then
			echo "$1 already mounted"
		fi
		return
	fi

	if [ "$bDry" = true ] ; then
		echo "mount $1"
	else
		mount "$1"
	fi
}

f_umount () {

	if [ "$bDry" = true ] ; then
		echo "umount $1"
	else
		umount -l -f "$1" &>/dev/null
	fi
}

# Initialize
bDry=false
strDo="both"
# Get input
TEMP=$(getopt --longoptions local,remote -o n,l,r -- "$@") || usage
# getopt quotes arguments with ' We use eval to get rid of that
eval set -- $TEMP

while :
do
	case "$1" in
		-h|--help|--usage)
			usage
			shift
			;;

		-n)
			bDry=true
			shift
			;;

		--local|-l)
			strDo="local"
			shift
			;;

		--remote|-r)
			strDo="remote"
			shift
			;;

		--)
			shift
			break
			;;

		*) 
			echo "Internal error from getopt!"
			exit 1
			;;
	esac
done

[[ $# != 0 ]] && usage

# Change Internal Field Separator to just newlines
IFS=$'\r\n'

# First get the non-comment noauto lines from fstab,
# sanitized to turn whitespace into single spaces
ARR_MOUNTS=$(sed -e '/^.*#/d' \
                 -e 's/\t/ /g' /etc/fstab \
              | awk '(index($4, "noauto") != 0)' \
              | tr -s " ")

if [ $strDo != "remote" ]; then
	ARR_MOUNTS_LOCAL=$(echo "$ARR_MOUNTS" \
	                    | awk '(index($3, "nfs") == 0)' \
	                    | awk '(index($4, "bind") == 0)' \
	                    | cut -f1,2 -d" ")
	ARR_MOUNTS_BIND=$(echo "$ARR_MOUNTS" \
	                   | awk '(index($3, "nfs") == 0)' \
	                   | awk '(index($4, "bind") != 0)' \
	                   | cut -f1,2 -d" ")

	for STR_MOUNT in ${ARR_MOUNTS_LOCAL}; do
		# Local disk, make sure it is connected
		STR_DISK=`echo "${STR_MOUNT}" | cut -f1 -d" "`
		STR_MOUNT_POINT=`echo "${STR_MOUNT}" | cut -f2 -d" "`
		if file ${STR_DISK} &>/dev/null ; then
			f_mount "$STR_MOUNT_POINT"
		else
			f_umount "$STR_MOUNT_POINT"
		fi
	done

	# sleep before mounting binds
	# (ensure locals are mounted if used in binds)
	sleep 1

	for STR_MOUNT in ${ARR_MOUNTS_BIND}; do
		# Local disk, make sure it is connected
		STR_DISK=`echo "${STR_MOUNT}" | cut -f1 -d" "`
		STR_MOUNT_POINT=`echo "${STR_MOUNT}" | cut -f2 -d" "`
		if file ${STR_DISK} &>/dev/null ; then
			f_mount "$STR_MOUNT_POINT"
		else
			f_umount "$STR_MOUNT_POINT"
		fi
	done

fi

if [ $strDo != "local" ]; then
	ARR_MOUNTS_REMOTE=$(echo "$ARR_MOUNTS" \
	                     | awk '(index($3, "nfs") != 0)' \
	                     | cut -f1,2 -d" ")

	for STR_MOUNT in ${ARR_MOUNTS_REMOTE}; do
		# Network mount, make sure the server is there
		STR_SERVER=$(echo "${STR_MOUNT}" | cut -f1 -d":")
		STR_MOUNT_POINT=$(echo "${STR_MOUNT}" | cut -f2 -d" ")
		ping -c 1 "${STR_SERVER}" &>/dev/null
		if [ $? -eq 0 ]; then
			f_mount "$STR_MOUNT_POINT"
		else
			f_umount "$STR_MOUNT_POINT"
		fi
	done
fi

exit 0
